# -*- coding: utf-8 -*-
"""Assignment_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZAsT9Ik5Sf-G2MyBIClPCj6hUf6V9maX

**Task:Iris Classification + Regression**

**Import libraries**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import (
    accuracy_score, precision_score, recall_score, f1_score,
    confusion_matrix, classification_report,
    mean_squared_error, r2_score
)

"""**Load dataset**"""

iris = load_iris()
df = pd.DataFrame(iris.data, columns=iris.feature_names)
df.columns = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width']
df['species'] = [iris.target_names[i] for i in iris.target]

"""**Classification**"""

print("\n--- Classification Task ---")

X = df[['sepal_length', 'sepal_width', 'petal_length', 'petal_width']].values
y = df['species'].values

"""**Encode labels into numbers**"""

le = LabelEncoder()
y_encoded = le.fit_transform(y)

"""**Train/test split (80/20)**"""

X_train, X_test, y_train, y_test = train_test_split(
    X, y_encoded, test_size=0.1, random_state=21, stratify=y_encoded
)

"""**Train classifier**"""

clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train, y_train)

"""**Predict**"""

y_pred = clf.predict(X_test)

"""**Metrics**"""

acc = accuracy_score(y_test, y_pred)
prec = precision_score(y_test, y_pred, average='macro')
rec = recall_score(y_test, y_pred, average='macro')
f1 = f1_score(y_test, y_pred, average='macro')

print(f"Accuracy  : {acc:.4f}")
print(f"Precision : {prec:.4f}")
print(f"Recall    : {rec:.4f}")
print(f"F1-score  : {f1:.4f}")

"""**Classification report**"""

print("\nDetailed classification report:")
print(classification_report(y_test, y_pred, target_names=le.classes_))

"""**Confusion matrix**"""

cm = confusion_matrix(y_test, y_pred)
print("\nConfusion Matrix:\n", cm)

"""**Plot confusion matrix**"""

plt.figure(figsize=(6, 5))
plt.imshow(cm, interpolation='nearest')
plt.title("Confusion Matrix")
plt.xlabel("Predicted label")
plt.ylabel("True label")
plt.xticks(np.arange(len(le.classes_)), le.classes_)
plt.yticks(np.arange(len(le.classes_)), le.classes_)
for i in range(cm.shape[0]):
    for j in range(cm.shape[1]):
        plt.text(j, i, cm[i, j],
                 ha="center", va="center", color="red")
plt.colorbar()
plt.show()

"""**Predict sample**"""

sample = np.array([[5.1, 3.5, 1.4, 0.2]])
pred_class = clf.predict(sample)[0]
print("\nExample sample:", sample.tolist())
print("Predicted species:", le.inverse_transform([pred_class])[0])

"""**Regression (extra task)**"""

print("\n--- Regression Task ---")

X_reg = df[['sepal_length', 'sepal_width', 'petal_width']].values
y_reg = df['petal_length'].values

Xr_train, Xr_test, yr_train, yr_test = train_test_split(
    X_reg, y_reg, test_size=0.2, random_state=42
)

regr = RandomForestRegressor(n_estimators=100, random_state=42)
regr.fit(Xr_train, yr_train)
yr_pred = regr.predict(Xr_test)

"""**Regression metrics**"""

mse = mean_squared_error(yr_test, yr_pred)
r2 = r2_score(yr_test, yr_pred)

print(f"Mean Squared Error (MSE): {mse:.4f}")
print(f"RÂ² Score               : {r2:.4f}")

"""**Predict petal_length for same sample**"""

sample_reg = np.array([[5.1, 3.5, 0.2]])  # exclude petal_length
pred_petal_length = regr.predict(sample_reg)[0]
print("\nPredicted petal_length for sample:", round(pred_petal_length, 3))